{"ast":null,"code":"import _extends from \"@babel/runtime-corejs2/helpers/esm/extends\";\nvar _jsxFileName = \"/project/react-dnd_and_react-hook-form/pages/index.tsx\";\nvar __jsx = React.createElement;\nimport React from \"react\";\nimport { DndProvider, useDrag, useDrop } from \"react-dnd\";\nimport { HTML5Backend } from \"react-dnd-html5-backend\";\nimport { FormProvider, useFieldArray, useForm, useFormContext } from \"react-hook-form\";\n\nconst Items = ({\n  movie,\n  position,\n  moveCard\n}) => {\n  // FormProviderによってここで受け取りが簡単に\n  const methods = useFormContext(); //useDropとuseDragを使用し、dropとdragを得る。\n  //最低限並び替えできるのが以下の実装\n\n  const [, drop] = useDrop({\n    accept: \"CARD\",\n    hover: item => {\n      const dragIndex = item.index; //drag中のインデックス\n\n      const hoverIndex = position; //hover対象のインデックス\n\n      if (dragIndex === hoverIndex) {\n        return;\n      }\n\n      moveCard(dragIndex, hoverIndex);\n      item.index = hoverIndex;\n    }\n  });\n  const [{\n    isDragging\n  }, drag, preview] = useDrag(() => ({\n    type: \"CARD\",\n    item: {\n      index: position,\n      id: movie.id\n    },\n    collect: monitor => {\n      return {\n        isDragging: monitor.isDragging()\n      };\n    }\n  }), [position]);\n  return __jsx(\"div\", {\n    //dropとpreviewを結びつけることでpreview対象に\n    // previewだとdragはできない\n    ref: node => preview(drop(node)),\n    style: {\n      opacity: isDragging ? 0.5 : 1,\n      fontSize: 25,\n      cursor: \"pointer\",\n      display: \"flex\"\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56\n    },\n    __self: this\n  }, __jsx(\"input\", _extends({}, methods.register(`items[${position}].title`), {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67\n    },\n    __self: this\n  })), __jsx(\"input\", _extends({}, methods.register(`items[${position}].description`), {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68\n    },\n    __self: this\n  })), __jsx(\"button\", {\n    ref: node => drag(drop(node)),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72\n    },\n    __self: this\n  }, \"XX\"));\n};\n\nexport default (() => {\n  // formの定義\n  const methods = useForm({\n    defaultValues: {\n      test: \"test\",\n      items: [{\n        id: \"1xx\",\n        title: \"Movie barato\",\n        description: \"Lorem ipsum 1\"\n      }, {\n        id: \"2bb\",\n        title: \"Movie médio\",\n        description: \"Lorem ipsum 2\"\n      }, {\n        id: \"3ee\",\n        title: \"Movie caro\",\n        description: \"Lorem ipsum 3\"\n      }]\n    }\n  }); // 配列部分の管理宣言\n  // controlが上記formであることを紐付けてる\n\n  const {\n    fields,\n    move\n  } = useFieldArray({\n    control: methods.control,\n    name: \"items\"\n  });\n\n  const onSubmit = data => console.log(data);\n\n  return (// FormProviderによって子コンポーネントにmethodsを渡しやすくしてる\n    __jsx(FormProvider, _extends({}, methods, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 101\n      },\n      __self: this\n    }), __jsx(\"form\", {\n      onSubmit: methods.handleSubmit(onSubmit),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 102\n      },\n      __self: this\n    }, __jsx(\"input\", _extends({}, methods.register(\"test\"), {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 104\n      },\n      __self: this\n    })), __jsx(\"hr\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 105\n      },\n      __self: this\n    }), __jsx(DndProvider, {\n      backend: HTML5Backend,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 111\n      },\n      __self: this\n    }, fields.map((field, index) => __jsx(Items, {\n      key: field.id,\n      movie: field,\n      position: index,\n      moveCard: move,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 113\n      },\n      __self: this\n    }))), __jsx(\"button\", {\n      type: \"submit\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 121\n      },\n      __self: this\n    }, \"PUSH\")))\n  );\n});","map":{"version":3,"sources":["/project/react-dnd_and_react-hook-form/pages/index.tsx"],"names":["React","DndProvider","useDrag","useDrop","HTML5Backend","FormProvider","useFieldArray","useForm","useFormContext","Items","movie","position","moveCard","methods","drop","accept","hover","item","dragIndex","index","hoverIndex","isDragging","drag","preview","type","id","collect","monitor","node","opacity","fontSize","cursor","display","register","defaultValues","test","items","title","description","fields","move","control","name","onSubmit","data","console","log","handleSubmit","map","field"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport { DndProvider, useDrag, useDrop } from \"react-dnd\";\nimport { HTML5Backend } from \"react-dnd-html5-backend\";\nimport {\n  FormProvider,\n  useFieldArray,\n  useForm,\n  useFormContext\n} from \"react-hook-form\";\n\ntype MoviesType = {\n  movie: {\n    title: string;\n    description: string;\n    id: string;\n  };\n  position: number;\n  moveCard: (from: number, to: number) => void;\n};\n\nconst Items = ({ movie, position, moveCard }: MoviesType) => {\n  // FormProviderによってここで受け取りが簡単に\n  const methods = useFormContext();\n\n  //useDropとuseDragを使用し、dropとdragを得る。\n  //最低限並び替えできるのが以下の実装\n  const [, drop] = useDrop({\n    accept: \"CARD\",\n\n    hover: (item: Record<string, any>) => {\n      const dragIndex = item.index; //drag中のインデックス\n      const hoverIndex = position; //hover対象のインデックス\n\n      if (dragIndex === hoverIndex) {\n        return;\n      }\n      moveCard(dragIndex, hoverIndex);\n      item.index = hoverIndex;\n    }\n  });\n\n  const [{ isDragging }, drag, preview] = useDrag(\n    () => ({\n      type: \"CARD\",\n      item: { index: position, id: movie.id },\n      collect: (monitor) => {\n        return {\n          isDragging: monitor.isDragging()\n        };\n      }\n    }),\n    [position]\n  );\n\n  return (\n    <div\n      //dropとpreviewを結びつけることでpreview対象に\n      // previewだとdragはできない\n      ref={(node) => preview(drop(node))}\n      style={{\n        opacity: isDragging ? 0.5 : 1,\n        fontSize: 25,\n        cursor: \"pointer\",\n        display: \"flex\"\n      }}\n    >\n      <input {...methods.register(`items[${position}].title`)} />\n      <input {...methods.register(`items[${position}].description`)} />\n      {/*\n          //dropとdragを結びつけることでdrag対象に\n        */}\n      <button ref={(node) => drag(drop(node))}>XX</button>\n    </div>\n  );\n};\n\nexport default () => {\n  // formの定義\n  const methods = useForm({\n    defaultValues: {\n      test: \"test\",\n      items: [\n        { id: \"1xx\", title: \"Movie barato\", description: \"Lorem ipsum 1\" },\n        { id: \"2bb\", title: \"Movie médio\", description: \"Lorem ipsum 2\" },\n        { id: \"3ee\", title: \"Movie caro\", description: \"Lorem ipsum 3\" }\n      ]\n    }\n  });\n\n  // 配列部分の管理宣言\n  // controlが上記formであることを紐付けてる\n  const { fields, move } = useFieldArray({\n    control: methods.control,\n    name: \"items\"\n  });\n\n  const onSubmit = (data: any) => console.log(data);\n\n  return (\n    // FormProviderによって子コンポーネントにmethodsを渡しやすくしてる\n    <FormProvider {...methods}>\n      <form onSubmit={methods.handleSubmit(onSubmit)}>\n        {/*  registerでinputと紐付け */}\n        <input {...methods.register(\"test\")} />\n        <hr />\n        {/*\n          並び替え対象部分をDndProviderにする\n          タッチデバイスでないときはHTML5Backendを指定\n          @see https://qiita.com/hiyamamoto/items/d83cf4ccfcfa886a0ba8\n        */}\n        <DndProvider backend={HTML5Backend}>\n          {fields.map((field, index) => (\n            <Items\n              key={field.id}\n              movie={field}\n              position={index}\n              moveCard={move}\n            />\n          ))}\n        </DndProvider>\n        <button type=\"submit\">PUSH</button>\n      </form>\n    </FormProvider>\n  );\n};\n"]},"metadata":{},"sourceType":"module"}