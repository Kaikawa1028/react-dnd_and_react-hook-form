{"version":3,"file":"static/webpack/static/development/pages/index.js.f4d5bca94dda106970b6.hot-update.js","sources":["webpack:///./pages/index.tsx"],"sourcesContent":["import React from \"react\";\nimport { DndProvider, useDrag, useDrop } from \"react-dnd\";\nimport { HTML5Backend } from \"react-dnd-html5-backend\";\nimport {\n  FormProvider,\n  useFieldArray,\n  useForm,\n  useFormContext\n} from \"react-hook-form\";\n\ntype MoviesType = {\n  movie: {\n    title: string;\n    description: string;\n    id: string;\n  };\n  position: number;\n  moveCard: (from: number, to: number) => void;\n};\n\nconst Items = ({ movie, position, moveCard }: MoviesType) => {\n  // FormProviderによってここで受け取りが簡単に\n  const methods = useFormContext();\n\n  //useDropとuseDragを使用し、dropとdragを得る。\n  //最低限並び替えできるのが以下の実装\n  const [, drop] = useDrop({\n    accept: \"CARD\",\n\n    hover: (item: Record<string, any>) => {\n      const dragIndex = item.index; //drag中のインデックス\n      const hoverIndex = position; //hover対象のインデックス\n\n      if (dragIndex === hoverIndex) {\n        return;\n      }\n      moveCard(dragIndex, hoverIndex);\n      item.index = hoverIndex;\n    }\n  });\n\n  const [{ isDragging }, drag, preview] = useDrag(\n    () => ({\n      type: \"CARD\",\n      item: { index: position, id: movie.id, type: \"CARD\" },\n      collect: (monitor) => {\n        return {\n          isDragging: monitor.isDragging()\n        };\n      }\n    }),\n    [position]\n  );\n\n  return (\n    <div\n      //dropとpreviewを結びつけることでpreview対象に\n      // previewだとdragはできない\n      ref={(node) => preview(drop(node))}\n      style={{\n        opacity: isDragging ? 0.5 : 1,\n        fontSize: 25,\n        cursor: \"pointer\",\n        display: \"flex\"\n      }}\n    >\n      <input {...methods.register(`items[${position}].title`)} />\n      <input {...methods.register(`items[${position}].description`)} />\n      {/*\n          //dropとdragを結びつけることでdrag対象に\n        */}\n      <button ref={(node) => drag(drop(node))}>XX</button>\n    </div>\n  );\n};\n\nexport default () => {\n  // formの定義\n  const methods = useForm({\n    defaultValues: {\n      test: \"test\",\n      items: [\n        { id: \"1xx\", title: \"Movie barato\", description: \"Lorem ipsum 1\" },\n        { id: \"2bb\", title: \"Movie médio\", description: \"Lorem ipsum 2\" },\n        { id: \"3ee\", title: \"Movie caro\", description: \"Lorem ipsum 3\" }\n      ]\n    }\n  });\n\n  // 配列部分の管理宣言\n  // controlが上記formであることを紐付けてる\n  const { fields, move } = useFieldArray({\n    control: methods.control,\n    name: \"items\"\n  });\n\n  const onSubmit = (data: any) => console.log(data);\n\n  return (\n    // FormProviderによって子コンポーネントにmethodsを渡しやすくしてる\n    <FormProvider {...methods}>\n      <form onSubmit={methods.handleSubmit(onSubmit)}>\n        {/*  registerでinputと紐付け */}\n        <input {...methods.register(\"test\")} />\n        <hr />\n        {/*\n          並び替え対象部分をDndProviderにする\n          タッチデバイスでないときはHTML5Backendを指定\n          @see https://qiita.com/hiyamamoto/items/d83cf4ccfcfa886a0ba8\n        */}\n        <DndProvider backend={HTML5Backend}>\n          {fields.map((field, index) => (\n            <Items\n              key={field.id}\n              movie={field}\n              position={index}\n              moveCard={move}\n            />\n          ))}\n        </DndProvider>\n        <button type=\"submit\">PUSH</button>\n      </form>\n    </FormProvider>\n  );\n};\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AAgBA;AAAA;AAAA;AAAA;AACA;AACA;AAGA;AACA;AANA;AAOA;AAEA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAZA;AANA;AAAA;AACA;AADA;AAsBA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AADA;AAGA;AAPA;AAAA;AAtBA;AAAA;AAAA;AAAA;AACA;AAiCA;AAEA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAJA;AAJA;AAAA;AAAA;AAAA;AAAA;AAAA;AAWA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AALA;AADA;AAYA;AACA;AAfA;AAgBA;AACA;AAFA;AAfA;AAAA;AACA;AAmBA;AAAA;AAAA;AACA;AACA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAMA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AACA;AAJA;AAAA;AAAA;AAAA;AAAA;AAAA;AADA;AASA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAtBA;AA0BA;;;;A","sourceRoot":""}